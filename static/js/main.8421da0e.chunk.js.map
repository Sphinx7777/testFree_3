{"version":3,"sources":["Components/Lists/Lists.module.scss","App.module.scss","serviceWorker.js","Components/Lists/List/ButtonsGroup/ButtonsGroupAddSublist.jsx","Components/Lists/TextField.jsx","Components/Lists/List/ButtonsGroup/ButtonsGroupRemoveSublist.jsx","Components/Lists/List/ButtonsGroup/ButtonsGroupRemoveList.jsx","Components/Lists/List/ListItemComponents/AddSublist.jsx","Components/Lists/List/ListItemComponents/AddSublistForSublist.jsx","Components/Lists/List/ListItem.jsx","Components/Lists/List/Lists.jsx","App.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","ButtonsGroupAddSublist","name","addNewSublist","id","subId","removeSublist","className","s","up","down","add","onClick","remove","TextField","useState","description","setDescription","type","maxLength","onChange","event","target","value","placeholder","Math","random","disabled","ButtonsGroupRemoveSublist","ButtonsGroupRemoveList","AddSublist","listSub","AddSublistForSublist","subSub","ListItem","listsArr","wrap","map","list","key","sublist","length","sublistShow","Lists","createNewSublistContent","ListsWrap","listsArrFromLocalStorage","JSON","parse","localStorage","getItem","setListsArr","setChangeToLocaleStorage","newArr","setItem","stringify","newSublist","sub","push","filter","toString","substr","valuesShow","valuesEdit","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8421da0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Lists_wrap__2i1iT\",\"up\":\"Lists_up__2ECOn\",\"down\":\"Lists_down__3NlVs\",\"add\":\"Lists_add__LOHCF\",\"remove\":\"Lists_remove__3hKRM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2kcmo\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport s from '../../Lists.module.scss';\r\n\r\nexport const ButtonsGroupAddSublist = ({name,addNewSublist, id, subId, removeSublist}) => {\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<button className={s.up}>\r\n\t\t\t\t↑\r\n\t\t\t</button>\r\n\t\t\t<button className={s.down}>\r\n\t\t\t\t↓\r\n\t\t\t</button>\r\n\t\t\t<button className={s.add} onClick={() => addNewSublist(id)}>\r\n\t\t\t\tAdd Sublist\r\n\t\t\t</button>\r\n\t\t\t<button className={s.remove} onClick={() => removeSublist(id,subId)}>\r\n\t\t\t\tRemove <b>{name}</b>\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n","import React,{useState} from 'react';\r\nimport s from './Lists.module.scss';\r\n\r\nexport const TextField = ({id}) => {\r\n\r\n\tlet [description,setDescription] = useState(null);\r\n\r\n\tconst onChange = (event) => {\r\n\t\tsetDescription(event.target.value)\r\n\t};\r\n\r\n\tconst setNewField = ()=>{\r\n\r\n\t\tconst newField = {\r\n\t\t\tid:Math.random(),\r\n\t\t\tname:'newSub',\r\n\t\t\tphone:'',\r\n\t\t\temail:'',\r\n\t\t\tshowDesc:false,\r\n\t\t\tshowForm: false\r\n\t\t};\r\n\r\n\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input type=\"text\" maxLength='20' onChange={onChange} placeholder='Name'/>\r\n\t\t\t<button onClick={setNewField} disabled={!description}>Add</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n","import React from 'react';\r\nimport s from '../../Lists.module.scss';\r\n\r\nexport const ButtonsGroupRemoveSublist = ({addNewSublist,name,removeSublist,id}) => {\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<button className={s.up}>\r\n\t\t\t\t↑\r\n\t\t\t</button>\r\n\t\t\t<button className={s.down}>\r\n\t\t\t\t↓\r\n\t\t\t</button>\r\n\t\t\t<button className={s.add} onClick={() => addNewSublist(id)}>\r\n\t\t\t\tAdd Sublist\r\n\t\t\t</button>\r\n\t\t\t<button className={s.remove}>\r\n\t\t\t\tRemove <b>{name}</b>\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n","import React from 'react';\r\nimport s from '../../Lists.module.scss';\r\n\r\nexport const ButtonsGroupRemoveList = ({name}) => {\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\r\n\t\t\t<button className={s.add}>\r\n\t\t\t\tAdd Sublist\r\n\t\t\t</button>\r\n\t\t\t<button className={s.remove}>\r\n\t\t\t\tRemove <b>{name}</b>\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n","import React from 'react';\r\nimport {ButtonsGroupAddSublist} from \"../ButtonsGroup/ButtonsGroupAddSublist\";\r\n\r\n\r\n\r\n\r\nexport const AddSublist = ({listSub, addNewSublist, removeSublist}) => {\r\n\r\n\treturn (\r\n\t\t<li>{listSub.name}\r\n\t\t\t<ButtonsGroupAddSublist {...\r\n\t\t\t\t{\r\n\t\t\t\t\tname: listSub.name, id: listSub.id, addNewSublist, removeSublist\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</li>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport {ButtonsGroupAddSublist} from \"../ButtonsGroup/ButtonsGroupAddSublist\";\r\n\r\n\r\n\r\nexport const AddSublistForSublist = ({listSub, subSub, addNewSublist, removeSublist}) => {\r\n\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t{subSub.name}\r\n\t\t\t<ButtonsGroupAddSublist {...\r\n\t\t\t\t{\r\n\t\t\t\t\tname: subSub.name,\r\n\t\t\t\t\tid: listSub.id, subId: subSub.id,\r\n\t\t\t\t\taddNewSublist, removeSublist\r\n\t\t\t\t}}/>\r\n\t\t</li>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport s from '../Lists.module.scss';\r\nimport {ButtonsGroupAddSublist} from \"./ButtonsGroup/ButtonsGroupAddSublist\";\r\nimport {TextField} from \"../TextField\";\r\nimport {ButtonsGroupRemoveSublist} from \"./ButtonsGroup/ButtonsGroupRemoveSublist\";\r\nimport {ButtonsGroupRemoveList} from \"./ButtonsGroup/ButtonsGroupRemoveList\";\r\nimport {AddSublist} from \"./ListItemComponents/AddSublist\";\r\nimport {AddSublistForSublist} from \"./ListItemComponents/AddSublistForSublist\";\r\n\r\n\r\nexport const ListItem = ({listsArr, addNewSublist, removeSublist}) => {\r\n\r\n\treturn (\r\n\t\t<ul className={s.wrap}>\r\n\t\t\t{listsArr && listsArr.map(list =>\r\n\t\t\t\t<li key={list.id}>{list.name}\r\n\t\t\t\t\t<ButtonsGroupRemoveList {...\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: list.name, id: list.id\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{list.sublist && list.sublist.map(listSub =>\r\n\t\t\t\t\t\t\t!listSub.sublist || !listSub.sublist.length || !listSub.sublistShow\r\n\t\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t\t<AddSublist key={listSub.id} {...{listSub, addNewSublist, removeSublist}} />\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<li key={listSub.id}>{listSub.name}\r\n\t\t\t\t\t\t\t\t\t<ButtonsGroupRemoveSublist {...\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\taddNewSublist,\r\n\t\t\t\t\t\t\t\t\t\t\tname: listSub.name,\r\n\t\t\t\t\t\t\t\t\t\t\tid: listSub.id,\r\n\t\t\t\t\t\t\t\t\t\t\tremoveSublist\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t\t{listSub.sublist && listSub.sublist.map(subSub =>\r\n\t\t\t\t\t\t\t\t\t\t\t<AddSublistForSublist key={subSub.id} {...\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlistSub, subSub, addNewSublist, removeSublist\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t<TextField/>\r\n\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<TextField/>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t)}\r\n\t\t\t<TextField/>\r\n\t\t</ul>\r\n\t);\r\n};\r\n","import React, {useState, useEffect} from 'react';\r\nimport s from '../Lists.module.scss';\r\nimport {ListItem} from \"./ListItem\";\r\n\r\n\r\nexport const Lists = ({createNewSublistContent,ListsWrap}) => {\r\n\r\n\tlet listsArrFromLocalStorage = JSON.parse(localStorage.getItem('listsArray'));\r\n\tconst [listsArr, setListsArr] = useState(listsArrFromLocalStorage || ListsWrap);\r\n\r\n\tconst setChangeToLocaleStorage = (newArr) => {\r\n\t\tlocalStorage.setItem('listsArray', JSON.stringify(newArr));\r\n\t\tlet listsArrFromLocalStorage = JSON.parse(localStorage.getItem('listsArray'));\r\n\t\tsetListsArr(listsArrFromLocalStorage);\r\n\t};\r\n\r\n\tconst addNewSublist = (id) => {\r\n\t\tconst newSublist = createNewSublistContent();\r\n\t\tlet newArr = listsArr.map(list => {\r\n\t\t\tlist.sublist.map(sub => {\r\n\t\t\t\tif (sub.id === id) {\r\n\t\t\t\t\tif (!sub.sublist) {\r\n\t\t\t\t\t\tsub.sublist = [];\r\n\t\t\t\t\t\tsub.sublist.push(newSublist);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsub.sublist.push(newSublist);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn sub;\r\n\t\t\t\t}\r\n\t\t\t\treturn sub;\r\n\t\t\t});\r\n\t\t\treturn list;\r\n\t\t});\r\n\r\n\t\tsetChangeToLocaleStorage(newArr);\r\n\t};\r\n\r\n\tconst removeSublist = (id, subId) => {\r\n\t\tlet newArr = listsArr.map(list => {\r\n\t\t\tlist.sublist.map(sub => {\r\n\t\t\t\tif (sub.id === id) {\r\n\t\t\t\t\tsub.sublist = sub.sublist.filter(s => s.id !== subId);\r\n\t\t\t\t\treturn sub;\r\n\t\t\t\t}\r\n\t\t\t\treturn sub;\r\n\t\t\t});\r\n\t\t\treturn list;\r\n\t\t});\r\n\t\tsetChangeToLocaleStorage(newArr);\r\n\t};\r\n\r\n\r\n\treturn (\r\n\t\t<ListItem {...{listsArr, addNewSublist, removeSublist}}/>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport s from './App.module.scss';\r\nimport {Lists} from \"./Components/Lists/List/Lists\";\r\n\r\nconst createNewSublistContent = () => {\r\n\treturn {\r\n\t\tid: Math.random(),\r\n\t\tname: Math.random().toString(36).substr(2, 5),\r\n\t\tvaluesShow: false,\r\n\t\tvaluesEdit: false,\r\n\t\tsublistShow: false,\r\n\t\tsublist: false\r\n\t}\r\n};\r\nconst ListsWrap = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: 'List_1',\r\n\t\tvaluesShow: false,\r\n\t\tvaluesEdit: false,\r\n\t\tsublist: [\r\n\t\t\t{\r\n\t\t\t\tid: 11,\r\n\t\t\t\tname: '1/1',\r\n\t\t\t\tvaluesShow: false,\r\n\t\t\t\tvaluesEdit: false,\r\n\t\t\t\tsublistShow: true,\r\n\t\t\t\tsublist: false\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 12,\r\n\t\t\t\tname: '1/2',\r\n\t\t\t\tvaluesShow: false,\r\n\t\t\t\tvaluesEdit: false,\r\n\t\t\t\tsublistShow: true,\r\n\t\t\t\tsublist: false\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 13,\r\n\t\t\t\tname: '1/3',\r\n\t\t\t\tvaluesShow: false,\r\n\t\t\t\tvaluesEdit: false,\r\n\t\t\t\tsublistShow: true,\r\n\t\t\t\tsublist: false\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 14,\r\n\t\t\t\tname: '1/4',\r\n\t\t\t\tvaluesShow: false,\r\n\t\t\t\tvaluesEdit: false,\r\n\t\t\t\tsublistShow: true,\r\n\t\t\t\tsublist: false\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n];\r\n\r\nexport const App = () => {\r\n\r\n\treturn (\r\n\t\t<div className={s.app}>\r\n\t\t\t<Lists {...{createNewSublistContent,ListsWrap}}/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {App} from \"./App\";\r\n\r\nReactDOM.render(\r\n\t<HashRouter>\r\n\t\t<App />\r\n\t</HashRouter>\r\n\t, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}