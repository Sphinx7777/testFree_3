{"version":3,"sources":["Components/Lists/Lists.module.scss","App.module.scss","serviceWorker.js","Components/Lists/List/ButtonsGroupAddSublist.jsx","Components/Lists/TextField.jsx","Components/Lists/List/ButtonsGroupRemoveSublist.jsx","Components/Lists/List/ButtonsGroupRemoveList.jsx","Components/Lists/List/Contacts.jsx","Components/Lists/List/ListItem.jsx","Components/Lists/List/Lists.jsx","index.js","App.jsx"],"names":["module","exports","Boolean","window","location","hostname","match","ButtonsGroupAddSublist","addNewSublist","id","subId","removeSublist","className","s","up","down","add","onClick","remove","TextField","useState","description","setDescription","type","maxLength","onChange","event","target","value","placeholder","Math","random","disabled","ButtonsGroupRemoveSublist","ButtonsGroupRemoveList","Contacts","values","showDesc","showDescEmail","email","showDescPhone","phone","ListItem","listsArr","wrap","map","list","key","name","sublist","listSub","length","sublistShow","subSub","valuesShow","localStorage","setItem","JSON","stringify","nameEdit","valuesEdit","dateOfBirth","Lists","listsArrFromLocalStorage","parse","getItem","setListsArr","console","log","newSublist","newArr","sub","push","filter","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,KAAO,oBAAoB,GAAK,kBAAkB,KAAO,oBAAoB,IAAM,mBAAmB,OAAS,sBAAsB,SAAW,0B,mBCAlKD,EAAOC,QAAU,CAAC,IAAM,mB,0ICWJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDCfOC,EAAyB,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,cAGjE,OACC,oCACC,4BAAQC,UAAWC,IAAEC,IAArB,UAGA,4BAAQF,UAAWC,IAAEE,MAArB,UAGA,4BAAQH,UAAWC,IAAEG,IAAKC,QAAS,kBAAMT,EAAcC,KAAvD,eAGA,4BAAQG,UAAWC,IAAEK,OAAQD,QAAS,kBAAMN,EAAcF,EAAGC,KAA7D,YCdUS,EAAY,SAAC,GAAS,EAARV,GAAS,IAAD,EAECW,mBAAS,MAFV,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAsBlC,OACC,6BACC,2BAAOC,KAAK,OAAOC,UAAU,KAAKC,SApBnB,SAACC,GACjBJ,EAAeI,EAAMC,OAAOC,QAmB2BC,YAAY,SAClE,4BAAQZ,QAjBU,WAGfa,KAAKC,UAcsBC,UAAWX,GAAzC,SCzBUY,EAA4B,SAAC,GAAwB,IAAvBtB,EAAsB,EAAtBA,cAAcF,EAAQ,EAARA,GAIxD,OACC,oCACC,4BAAQG,UAAWC,IAAEC,IAArB,UAGA,4BAAQF,UAAWC,IAAEE,MAArB,UAGA,4BAAQH,UAAWC,IAAEG,IAAKC,QAAS,kBAAMN,EAAcF,KAAvD,kBAGA,4BAAQG,UAAWC,IAAEK,QAArB,YCfUgB,EAAyB,WAIrC,OACC,oCAEC,4BAAQtB,UAAWC,IAAEG,KAArB,kBAGA,4BAAQJ,UAAWC,IAAEK,QAArB,YCTUiB,EAAW,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEzB,OACC,yBAAKxB,UAAWC,IAAEwB,UACZ,0BAAMzB,UAAWC,IAAEyB,eAAnB,UACEF,EAAOG,OAEd,0BAAM3B,UAAWC,IAAE2B,eAAnB,UACOJ,EAAOK,SCHJC,EAAW,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,SAAUnC,EAAkC,EAAlCA,cAAeG,EAAmB,EAAnBA,cAElD,OACC,wBAAIC,UAAWC,IAAE+B,MACfD,GAAYA,EAASE,KAAI,SAAAC,GAAI,OAC7B,wBAAIC,IAAKD,EAAKrC,IAAKqC,EAAKE,KAAK,kBAAC,EAAD,CAAwBvC,GAAIqC,EAAKrC,KAC7D,4BACEqC,EAAKG,SAAWH,EAAKG,QAAQJ,KAAI,SAAAK,GAAO,OACvCA,EAAQD,SAAYC,EAAQD,QAAQE,QAAWD,EAAQE,YAMvD,wBAAIL,IAAKG,EAAQzC,IAAKyC,EAAQF,KAA9B,IAAoC,kBAAC,EAA8B,CAACvC,GAAIyC,EAAQzC,GAAIE,kBACnF,4BACEuC,EAAQD,SAAWC,EAAQD,QAAQJ,KAAI,SAAAQ,GAAM,OAC7C,wBAAIN,IAAKM,EAAO5C,IACd4C,EAAOL,KACPK,EAAOC,YAAc,kBAAC,EAAD,CAAUlB,OAAQiB,EAAOjB,SAC/C,kBAAC,EAA2B,CAC3B3B,GAAIyC,EAAQzC,GAAIC,MAAO2C,EAAO5C,GAC9BD,gBAAeG,sBAIlB,kBAAC,EAAD,CAAWF,GAAIyC,EAAQzC,OAhBzB,wBAAIsC,IAAKG,EAAQzC,IAAKyC,EAAQF,KAC7B,kBAAC,EAA2B,CAACvC,GAAIyC,EAAQzC,GAAID,gBAAeG,sBAmB/D,kBAAC,EAAD,WAIH,kBAAC,EAAD,QCgDH4C,aAAaC,QAAQ,aAAcC,KAAKC,UAtFtB,CACjB,CACCjD,GAAI,EACJuC,KAAM,SACNW,UAAS,EACTV,QAAS,CACR,CACCxC,GAAI,GACJuC,KAAM,MACNM,YAAY,EACZM,YAAY,EACZR,aAAa,EACbH,SAAS,EACTb,OAAQ,CACPK,MAAO,WACPF,MAAO,gBACPsB,YAAa,eAGf,CACCpD,GAAI,GACJuC,KAAM,MACNM,YAAY,EACZM,YAAY,EACZR,aAAa,EACbH,QACC,CACC,CACCxC,GAAI,IACJuC,KAAM,QACNM,YAAY,EACZM,YAAY,EACZxB,OAAQ,CACPK,MAAO,WACPF,MAAO,gBACPsB,YAAa,eAGf,CACCpD,GAAI,IACJuC,KAAM,QACNM,YAAY,EACZM,YAAY,EACZxB,OAAQ,CACPK,MAAO,WACPF,MAAO,gBACPsB,YAAa,gBAIjBzB,OAAQ,CACPK,MAAO,WACPF,MAAO,gBACPsB,YAAa,eAGf,CACCpD,GAAI,GACJuC,KAAM,MACNM,YAAY,EACZM,YAAY,EACZR,aAAa,EACbH,SAAS,EACTb,OAAQ,CACPK,MAAO,WACPF,MAAO,gBACPsB,YAAa,eAGf,CACCpD,GAAI,GACJuC,KAAM,MACNM,YAAY,EACZM,YAAY,EACZR,aAAa,EACbH,SAAS,EACTb,OAAQ,CACPK,MAAO,WACPF,MAAO,gBACPsB,YAAa,oBASX,IAAMC,EAAQ,WAEpB,IAAIC,EAA2BN,KAAKO,MAAMT,aAAaU,QAAQ,eAFrC,EAIM7C,mBAAS2C,GAJf,mBAInBpB,EAJmB,KAITuB,EAJS,KAK1BC,QAAQC,IAAIzB,GA4CZ,OACC,kBAAC,EAAa,CAACA,WAAUnC,cA3CJ,SAACC,GACtB,IAAM4D,EAAa,CAClB5D,GAAIqB,KAAKC,SACTiB,KAAM,aACNM,YAAY,EACZM,YAAY,EACZR,aAAa,EACbH,SAAS,GAENqB,EAAS3B,EAASE,KAAI,SAAAC,GAazB,OAZAA,EAAKG,QAAQJ,KAAI,SAAA0B,GAChB,OAAIA,EAAI9D,KAAOA,GACT8D,EAAItB,QAIRsB,EAAItB,QAAQuB,KAAKH,IAHjBE,EAAItB,QAAU,GACdsB,EAAItB,QAAQuB,KAAKH,IAIXE,GAEDA,KAEDzB,KAERoB,EAAYI,IAmB4B3D,cAhBnB,SAACF,EAAGC,GACzB,IAAI4D,EAAS3B,EAASE,KAAI,SAAAC,GAQzB,OAPAA,EAAKG,QAAQJ,KAAI,SAAA0B,GAChB,OAAIA,EAAI9D,KAAOA,GACd8D,EAAItB,QAAQsB,EAAItB,QAAQwB,QAAO,SAAA5D,GAAC,OAAIA,EAAEJ,KAAOC,KACtC6D,GAEDA,KAEDzB,KAERoB,EAAYI,OCnIdI,IAASC,OACR,kBAAC,IAAD,KACC,mBCHiB,WAElB,OACC,yBAAK/D,UAAWC,IAAE+D,KACjB,kBAAC,EAAD,SDDD,OAECC,SAASC,eAAe,SRsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d0aa9de1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Lists_wrap__3RmgW\",\"up\":\"Lists_up__1iLvo\",\"down\":\"Lists_down__3NPmE\",\"add\":\"Lists_add__3JDKJ\",\"remove\":\"Lists_remove__1YHv7\",\"showDesc\":\"Lists_showDesc__iXCYE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1F1l-\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport s from '../Lists.module.scss';\r\n\r\nexport const ButtonsGroupAddSublist = ({addNewSublist, id, subId, removeSublist}) => {\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<button className={s.up}>\r\n\t\t\t\t↑\r\n\t\t\t</button>\r\n\t\t\t<button className={s.down}>\r\n\t\t\t\t↓\r\n\t\t\t</button>\r\n\t\t\t<button className={s.add} onClick={() => addNewSublist(id)}>\r\n\t\t\t\tAdd Sublist\r\n\t\t\t</button>\r\n\t\t\t<button className={s.remove} onClick={() => removeSublist(id,subId)}>\r\n\t\t\t\tRemove\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n","import React,{useState} from 'react';\r\nimport s from './Lists.module.scss';\r\n\r\nexport const TextField = ({id}) => {\r\n\r\n\tlet [description,setDescription] = useState(null);\r\n\r\n\tconst onChange = (event) => {\r\n\t\tsetDescription(event.target.value)\r\n\t};\r\n\r\n\tconst setNewField = ()=>{\r\n\r\n\t\tconst newField = {\r\n\t\t\tid:Math.random(),\r\n\t\t\tname:'newSub',\r\n\t\t\tphone:'',\r\n\t\t\temail:'',\r\n\t\t\tshowDesc:false,\r\n\t\t\tshowForm: false\r\n\t\t};\r\n\r\n\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input type=\"text\" maxLength='20' onChange={onChange} placeholder='Name'/>\r\n\t\t\t<button onClick={setNewField} disabled={!description}>Add</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n","import React from 'react';\r\nimport s from '../Lists.module.scss';\r\n\r\nexport const ButtonsGroupRemoveSublist = ({removeSublist,id}) => {\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<button className={s.up}>\r\n\t\t\t\t↑\r\n\t\t\t</button>\r\n\t\t\t<button className={s.down}>\r\n\t\t\t\t↓\r\n\t\t\t</button>\r\n\t\t\t<button className={s.add} onClick={() => removeSublist(id)}>\r\n\t\t\t\tRemove Sublist\r\n\t\t\t</button>\r\n\t\t\t<button className={s.remove}>\r\n\t\t\t\tRemove\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n","import React from 'react';\r\nimport s from '../Lists.module.scss';\r\n\r\nexport const ButtonsGroupRemoveList = () => {\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\r\n\t\t\t<button className={s.add}>\r\n\t\t\t\tRemove Sublist\r\n\t\t\t</button>\r\n\t\t\t<button className={s.remove}>\r\n\t\t\t\tRemove\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n","import React from 'react';\r\nimport s from '../Lists.module.scss';\r\n\r\n\r\nexport const Contacts = ({values}) => {\r\n\r\n\treturn (\r\n\t\t<div className={s.showDesc}>\r\n\t\t\t\t\t\t  <span className={s.showDescEmail}>\r\n\t\t\t\t\t\t\t✉ {values.email}\r\n\t\t\t\t\t\t  </span>\r\n\t\t\t<span className={s.showDescPhone}>\r\n\t\t\t\t\t\t\t✆ {values.phone}\r\n\t\t\t\t\t\t  </span>\r\n\t\t\t{/*<span className={s.closeDesc}>*/}\r\n\t\t\t{/*\t\t\t\t\tX*/}\r\n\t\t\t{/*\t\t\t\t</span>*/}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n","import React from 'react';\r\nimport s from '../Lists.module.scss';\r\nimport {ButtonsGroupAddSublist} from \"./ButtonsGroupAddSublist\";\r\nimport {TextField} from \"../TextField\";\r\nimport {ButtonsGroupRemoveSublist} from \"./ButtonsGroupRemoveSublist\";\r\nimport {ButtonsGroupRemoveList} from \"./ButtonsGroupRemoveList\";\r\nimport {Contacts} from \"./Contacts\";\r\n\r\n\r\nexport const ListItem = ({listsArr, addNewSublist, removeSublist}) => {\r\n\r\n\treturn (\r\n\t\t<ul className={s.wrap}>\r\n\t\t\t{listsArr && listsArr.map(list =>\r\n\t\t\t\t<li key={list.id}>{list.name}<ButtonsGroupRemoveList id={list.id}/>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{list.sublist && list.sublist.map(listSub =>\r\n\t\t\t\t\t\t\t!listSub.sublist || !listSub.sublist.length || !listSub.sublistShow\r\n\t\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t\t<li key={listSub.id}>{listSub.name}\r\n\t\t\t\t\t\t\t\t\t<ButtonsGroupAddSublist {...{id: listSub.id, addNewSublist, removeSublist}} />\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<li key={listSub.id}>{listSub.name} <ButtonsGroupRemoveSublist {...{id: listSub.id, removeSublist}}  />\r\n\t\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t\t{listSub.sublist && listSub.sublist.map(subSub =>\r\n\t\t\t\t\t\t\t\t\t\t\t<li key={subSub.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{subSub.name}\r\n\t\t\t\t\t\t\t\t\t\t\t\t{subSub.valuesShow && <Contacts values={subSub.values}/>}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ButtonsGroupAddSublist {...{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: listSub.id, subId: subSub.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taddNewSublist, removeSublist\r\n\t\t\t\t\t\t\t\t\t\t\t\t}} />\r\n\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t<TextField id={listSub.id}/>\r\n\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<TextField/>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t)}\r\n\t\t\t<TextField/>\r\n\t\t</ul>\r\n\t);\r\n};\r\n","import React, {useState, useEffect} from 'react';\r\nimport s from '../Lists.module.scss';\r\nimport {ListItem} from \"./ListItem\";\r\n\r\n\r\nconst ListsWrap = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: 'List_1',\r\n\t\tnameEdit:false,\r\n\t\tsublist: [\r\n\t\t\t{\r\n\t\t\t\tid: 11,\r\n\t\t\t\tname: '1/1',\r\n\t\t\t\tvaluesShow: false,\r\n\t\t\t\tvaluesEdit: false,\r\n\t\t\t\tsublistShow: true,\r\n\t\t\t\tsublist: false,\r\n\t\t\t\tvalues: {\r\n\t\t\t\t\tphone: 1234567891,\r\n\t\t\t\t\temail: '123@gmail.com',\r\n\t\t\t\t\tdateOfBirth: '20.02.2075'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 12,\r\n\t\t\t\tname: '1/2',\r\n\t\t\t\tvaluesShow: false,\r\n\t\t\t\tvaluesEdit: false,\r\n\t\t\t\tsublistShow: true,\r\n\t\t\t\tsublist:\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tid: 121,\r\n\t\t\t\t\t\t\tname: '1/2/1',\r\n\t\t\t\t\t\t\tvaluesShow: false,\r\n\t\t\t\t\t\t\tvaluesEdit: false,\r\n\t\t\t\t\t\t\tvalues: {\r\n\t\t\t\t\t\t\t\tphone: 1234567891,\r\n\t\t\t\t\t\t\t\temail: '123@gmail.com',\r\n\t\t\t\t\t\t\t\tdateOfBirth: '20.02.2075'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tid: 122,\r\n\t\t\t\t\t\t\tname: '1/2/2',\r\n\t\t\t\t\t\t\tvaluesShow: true,\r\n\t\t\t\t\t\t\tvaluesEdit: false,\r\n\t\t\t\t\t\t\tvalues: {\r\n\t\t\t\t\t\t\t\tphone: 1234567891,\r\n\t\t\t\t\t\t\t\temail: '123@gmail.com',\r\n\t\t\t\t\t\t\t\tdateOfBirth: '20.02.2075'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\tvalues: {\r\n\t\t\t\t\tphone: 1234567891,\r\n\t\t\t\t\temail: '123@gmail.com',\r\n\t\t\t\t\tdateOfBirth: '20.02.2075'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 13,\r\n\t\t\t\tname: '1/3',\r\n\t\t\t\tvaluesShow: false,\r\n\t\t\t\tvaluesEdit: false,\r\n\t\t\t\tsublistShow: true,\r\n\t\t\t\tsublist: false,\r\n\t\t\t\tvalues: {\r\n\t\t\t\t\tphone: 1234567891,\r\n\t\t\t\t\temail: '123@gmail.com',\r\n\t\t\t\t\tdateOfBirth: '20.02.2075'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 14,\r\n\t\t\t\tname: '1/4',\r\n\t\t\t\tvaluesShow: false,\r\n\t\t\t\tvaluesEdit: false,\r\n\t\t\t\tsublistShow: true,\r\n\t\t\t\tsublist: false,\r\n\t\t\t\tvalues: {\r\n\t\t\t\t\tphone: 1234567891,\r\n\t\t\t\t\temail: '123@gmail.com',\r\n\t\t\t\t\tdateOfBirth: '20.02.2075'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n];\r\n\r\nlocalStorage.setItem('listsArray', JSON.stringify(ListsWrap));\r\n\r\nexport const Lists = () => {\r\n\r\n\tlet listsArrFromLocalStorage = JSON.parse(localStorage.getItem('listsArray'));\r\n\r\n\tconst [listsArr, setListsArr] = useState(listsArrFromLocalStorage);\r\n\tconsole.log(listsArr);\r\n\r\n\tconst addNewSublist = (id) => {\r\n\t\tconst newSublist = {\r\n\t\t\tid: Math.random(),\r\n\t\t\tname: 'newSublist',\r\n\t\t\tvaluesShow: false,\r\n\t\t\tvaluesEdit: false,\r\n\t\t\tsublistShow: false,\r\n\t\t\tsublist: false\r\n\t\t};\r\n\t\tlet newArr = listsArr.map(list => {\r\n\t\t\tlist.sublist.map(sub => {\r\n\t\t\t\tif (sub.id === id) {\r\n\t\t\t\t\tif (!sub.sublist) {\r\n\t\t\t\t\t\tsub.sublist = [];\r\n\t\t\t\t\t\tsub.sublist.push(newSublist);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsub.sublist.push(newSublist);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn sub;\r\n\t\t\t\t}\r\n\t\t\t\treturn sub;\r\n\t\t\t});\r\n\t\t\treturn list;\r\n\t\t});\r\n\t\tsetListsArr(newArr)\r\n\t};\r\n\r\n\tconst removeSublist = (id,subId) => {\r\n\t\tlet newArr = listsArr.map(list => {\r\n\t\t\tlist.sublist.map(sub => {\r\n\t\t\t\tif (sub.id === id) {\r\n\t\t\t\t\tsub.sublist=sub.sublist.filter(s => s.id !== subId);\r\n\t\t\t\t\treturn sub;\r\n\t\t\t\t}\r\n\t\t\t\treturn sub;\r\n\t\t\t});\r\n\t\t\treturn list;\r\n\t\t});\r\n\t\tsetListsArr(newArr)\r\n\t};\r\n\r\n\r\n\treturn (\r\n\t\t<ListItem {...{listsArr, addNewSublist, removeSublist}}/>\r\n\t);\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {App} from \"./App\";\n\nReactDOM.render(\n\t<HashRouter>\n\t\t<App />\n\t</HashRouter>\n\t, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n","import React from 'react';\nimport s from './App.module.scss';\nimport {Lists} from \"./Components/Lists/List/Lists\";\n\n\n\nexport const App = () => {\n\n\treturn (\n\t\t<div className={s.app}>\n\t\t\t<Lists />\n\t\t</div>\n\t);\n};\n\n"],"sourceRoot":""}